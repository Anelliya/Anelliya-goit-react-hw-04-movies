{"version":3,"sources":["components/NotFound.jsx","services/movieDitailsApi.js","services/movieCastApi.js","components/Cast.jsx","services/movieReviesApi.js","components/Reviews.jsx","pages/MovieDitails.jsx"],"names":["NorFound","className","axios","defaults","params","api_key","fetchMovieById","id","get","then","res","data","fetchCast","movieId","Cast","state","cast","this","props","setState","catch","err","console","log","map","name","profile_path","character","job","credit_id","src","defaultImg","alt","width","Component","fetchReviews","results","Reviews","reviews","length","author","content","movieDitails","genres","release","getMovieDitail","match","goBackBtnClick","history","push","pathname","location","from","movieditail","prevProps","prevState","genre","join","release_date","split","Button","onClick","title","backdrop_path","vote_average","overview","to","url","path","render","NotFound"],"mappings":"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","file":"static/js/movie-ditails.d94971aa.chunk.js","sourcesContent":["const NorFound = () => {\n    return (<p className=\"error-title\">404 Page not found</p>);\n}\n\nexport default NorFound;","import axios from 'axios';\n\nconst API_KEY = '50b81e1c6c3b9e5f74d2015b742ff0b0';\n\naxios.defaults.params = {\n    api_key: API_KEY\n}\n\nconst fetchMovieById = (id) => {\n    return axios\n        .get(`https://api.themoviedb.org/3/movie/${id}?`)\n        .then(res => res.data)\n }\n\nexport default fetchMovieById;","import axios from 'axios';\n\nconst API_KEY = '50b81e1c6c3b9e5f74d2015b742ff0b0';\naxios.defaults.params = {\n    api_key: API_KEY\n}\n\nconst fetchCast = (movieId) =>\n    axios.get(`https://api.themoviedb.org/3/movie/${movieId}/credits`)\n\nexport default fetchCast;","import { Component } from 'react';\n\nimport defaultImg from \"../images/notFound.png\";\nimport fetchCast from \"../services/movieCastApi\";\n\n\nclass Cast extends Component {\n    state = {\n        cast: [],\n    }\n\n    componentDidMount() {\n        const movieId = this.props.movieId;\n        fetchCast(movieId)\n            .then(res => this.setState({ cast: res.data.cast }))\n            .catch(err => console.log(\"err from cast:\", err))\n    }\n\n    render() {\n        const { cast } = this.state;\n\n        return (\n            cast ?\n                <ul>\n                    {cast.map(({ name, profile_path, character, job, credit_id }) =>\n                        <li key={credit_id}>\n                            <img src={profile_path\n                                ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                                : defaultImg}\n                                alt={job} width=\"100px\" />\n                            <h2>{name}</h2>\n                            <p>Character: {character ? `${character}` : 'unknown'}</p>\n                        </li>\n                    )}\n                </ul>\n                : null\n\n        );\n    }\n}\n\nexport default Cast;","import axios from 'axios';\n\n\nconst API_KEY = '50b81e1c6c3b9e5f74d2015b742ff0b0';\naxios.defaults.params = {\n    api_key: API_KEY\n}\n\nconst fetchReviews = (movieId) =>\n    axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews`)\n        .then(res => res.data.results)\n    \n\nexport default fetchReviews;","import { Component } from 'react';\n\n\nimport fetchReviews from '../services/movieReviesApi'\n\nclass Reviews extends Component {\n    state = {\n        reviews: [],\n    }\n\n    componentDidMount() {\n        const movieId = this.props.movieId;\n\n        fetchReviews(movieId)\n            .then(reviews => this.setState({ reviews: reviews }))\n    }\n\n    render() {\n        const { reviews } = this.state;\n        return (\n            reviews?.length > 0\n                ? reviews.map(({ author, content, id }) =>\n                    <div key={id}>\n                        <h2>Author : {author} </h2>\n                        <p>{content}</p>\n                    </div>\n                )\n                : <h2>We don't have any review for this movie.</h2>\n        )\n    }\n\n}\n\nexport default Reviews;","import { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport { NavLink } from 'react-router-dom';\n\nimport fetchMovieById from \"../services/movieDitailsApi\";\nimport NotFound from \"../components/NotFound\";\nimport Button from \"../components/Button\";\nimport Cast from \"../components/Cast\";\nimport Reviews from \"../components/Reviews\";\n\n\nclass movieDitails extends Component {\n\n    state = {\n        movieDitails: null,\n        genres: '',\n        release: '',\n    }\n\n    componentDidMount() {\n        !this.state.movieditail && this.getMovieDitail();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.movieDitails !== this.state.movieDitails) {\n            const getGenres = () => this.state.movieDitails.genres.map(genre => genre.name).join(\" \");\n            const date = () => this.state.movieDitails.release_date.split('-')[0];\n            this.setState({ genres: getGenres(), release: date(), cast: this.state.movieDitails.cast })\n        }\n    }\n\n    getMovieDitail = () => {\n        const movieId = this.props.match.params.movieId;\n\n        fetchMovieById(movieId)\n            .then(movieDitails => this.setState({ movieDitails: { ...movieDitails } }))\n            .catch(err => console.log('err:', err))\n    }\n\n    goBackBtnClick = () => {\n        this.props.history.push({\n            pathname: `${this.props.location.from}` || '/',\n            state: `${this.props.location.state}`\n        })\n    }\n\n    render() {\n        const { movieDitails, genres, release } = this.state;\n        const movieId = this.props.match.params.movieId;\n\n        return (\n\n            (movieDitails ?\n                (\n                    <div className=\"Movie-Ditails-Wrapper\">\n                        <Button\n                            onClick={this.goBackBtnClick} title={'Go back'} className=\"Navigation-button\" />\n                        <div className=\"Movie-ditails\">\n                            <img src={`https://image.tmdb.org/t/p/w500/${movieDitails.backdrop_path}`} alt=\"\"\n                                className=\"Movie-ditails-img\" />\n                            <div>\n                                <h1>{(movieDitails.title) ? `${movieDitails.title}` : `${movieDitails.name}`} {release}</h1>\n                                <p>{`User Score: ${movieDitails.vote_average * 10}%`}</p>\n                                <h2>Genres</h2>\n                                <p>{`${genres}`}</p>\n                                <h2>Overview</h2>\n                                <p>{`${movieDitails.overview}`}</p>\n                            </div>\n                        </div>\n                        <div className=\"Aditional-information-wrapper\">\n                            <h2>Aditional information</h2>\n                            <p><NavLink\n                                to={{\n                                    pathname: `${this.props.match.url}/cast`,\n                                    state: `${this.props.location.state}`,\n                                    from: `${this.props.location.from}`\n                                }}>Cast</NavLink></p>\n                            <p><NavLink\n                                to={{\n                                    pathname: `${this.props.match.url}/reviews`,\n                                    state: `${this.props.location.state}`,\n                                    from: `${this.props.location.from}`\n                                }}>Reviews</NavLink></p>\n                        </div>\n                        <Route path={`${this.props.match.url}/cast`} render={props => <Cast movieId={movieId} />} />\n                        <Route path={`${this.props.match.url}/reviews`} render={props => <Reviews movieId={movieId} />} />\n                    </div >\n                )\n                : <NotFound />\n            ));\n    }\n}\n\nexport default movieDitails;"],"sourceRoot":""}